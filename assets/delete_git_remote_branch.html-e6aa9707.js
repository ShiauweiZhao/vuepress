import{_ as e,o as r,c as a,a as c}from"./app-632f27f1.js";const d={},n=c(`<h2 id="删除本地分支" tabindex="-1"><a class="header-anchor" href="#删除本地分支" aria-hidden="true">#</a> 删除本地分支</h2><pre><code>git branch -D &lt;branch_name&gt;
</code></pre><h2 id="删除远程分支" tabindex="-1"><a class="header-anchor" href="#删除远程分支" aria-hidden="true">#</a> 删除远程分支</h2><pre><code>    git push origin :&lt;branch_name&gt;
</code></pre><h2 id="批量删除本地分支" tabindex="-1"><a class="header-anchor" href="#批量删除本地分支" aria-hidden="true">#</a> 批量删除本地分支</h2><pre><code>git branch -a | grep &#39;pr-&#39; | xargs git branch -D
</code></pre><p><code>git branch -a</code>表示列出本地所有分支，<code>grep ‘pr-’</code>表示正则匹配本地所有分支中分支名有&#39;pr-&#39;的分支，然后将以上匹配结果作为参数传给<code>git branch -D</code>,执行删除本地分支命令，‘|’相当于一个管道符，将上一段的结果传给下一段</p><p>有时候分支命名上没什么规则，只想保留某几个正在开发中的分支，删除所有其他的分支，就可以用下面命令：</p><pre><code>git branch -a | grep -v -E &#39;A|B&#39; | xargs git branch -D
</code></pre><h2 id="批量删除远程分支" tabindex="-1"><a class="header-anchor" href="#批量删除远程分支" aria-hidden="true">#</a> 批量删除远程分支</h2><pre><code>git branch -r | grep  &#39;pr-&#39; | sed &#39;s/origin\\///g&#39; | xargs -I {} git push origin :{}
</code></pre><p><code>git branch -r</code> 查看远程分支 | <code>sed ‘s/origin///g‘</code> 去掉origin(能够把接受到的分支都过滤掉开头的origin/得到实际的分支名) <code>-I {} </code> 使用占位符来构造后面的命令 <code>git push origin :branchName</code> 删除远程分支</p>`,12),o=[n];function i(t,h){return r(),a("div",null,o)}const s=e(d,[["render",i],["__file","delete_git_remote_branch.html.vue"]]);export{s as default};
